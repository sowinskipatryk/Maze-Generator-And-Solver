import queue
from PIL import Image, ImageDraw

maze = [['#', '0', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#',
         '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#',
         '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#',
         '#', '#', '#', '#', '#', '#', '#', '#', '#'],
        ['#', ' ', '#', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ',
         ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ',
         ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', '#', ' ',
         ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#'],
        ['#', ' ', '#', '#', '#', '#', '#', ' ', '#', ' ', '#', ' ', '#', '#',
         '#', '#', '#', ' ', '#', '#', '#', '#', '#', ' ', '#', ' ', '#', '#',
         '#', ' ', '#', '#', '#', '#', '#', '#', '#', ' ', '#', ' ', '#', ' ',
         '#', '#', '#', '#', '#', '#', '#', ' ', '#'],
        ['#', ' ', ' ', ' ', ' ', ' ', '#', ' ', '#', ' ', '#', ' ', '#', ' ',
         ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ',
         '#', ' ', '#', ' ', ' ', ' ', '#', ' ', ' ', ' ', '#', ' ', ' ', ' ',
         '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#'],
        ['#', ' ', '#', '#', '#', ' ', '#', ' ', '#', '#', '#', ' ', '#', ' ',
         '#', ' ', '#', '#', '#', '#', '#', ' ', '#', '#', '#', '#', '#', '#',
         '#', ' ', '#', ' ', '#', ' ', '#', ' ', '#', '#', '#', '#', '#', '#',
         '#', ' ', '#', '#', '#', '#', '#', ' ', '#'],
        ['#', ' ', '#', ' ', ' ', ' ', '#', ' ', ' ', ' ', '#', ' ', ' ', ' ',
         '#', ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ',
         '#', ' ', '#', ' ', '#', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ',
         '#', ' ', '#', ' ', ' ', ' ', '#', ' ', '#'],
        ['#', ' ', '#', '#', '#', ' ', '#', '#', '#', ' ', '#', '#', '#', ' ',
         '#', ' ', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', ' ',
         '#', ' ', '#', ' ', '#', '#', '#', '#', '#', '#', '#', ' ', '#', ' ',
         '#', ' ', '#', '#', '#', ' ', '#', ' ', '#'],
        ['#', ' ', ' ', ' ', '#', ' ', ' ', ' ', '#', ' ', ' ', ' ', '#', ' ',
         '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ',
         '#', ' ', ' ', ' ', '#', ' ', ' ', ' ', '#', ' ', ' ', ' ', '#', ' ',
         ' ', ' ', '#', ' ', ' ', ' ', '#', ' ', '#'],
        ['#', ' ', '#', ' ', '#', '#', '#', ' ', '#', '#', '#', ' ', '#', '#',
         '#', '#', '#', ' ', '#', '#', '#', '#', '#', ' ', '#', ' ', '#', '#',
         '#', '#', '#', '#', '#', ' ', '#', ' ', '#', ' ', '#', '#', '#', '#',
         '#', '#', '#', ' ', '#', '#', '#', ' ', '#'],
        ['#', ' ', '#', ' ', '#', ' ', ' ', ' ', '#', ' ', '#', ' ', '#', ' ',
         ' ', ' ', '#', ' ', ' ', ' ', '#', ' ', ' ', ' ', '#', ' ', ' ', ' ',
         ' ', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', '#', ' ', ' ', ' ',
         ' ', ' ', '#', ' ', ' ', ' ', '#', ' ', '#'],
        ['#', ' ', '#', ' ', '#', '#', '#', ' ', '#', ' ', '#', ' ', '#', ' ',
         '#', ' ', '#', '#', '#', ' ', '#', ' ', '#', '#', '#', '#', '#', '#',
         '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', ' ', '#', '#',
         '#', ' ', '#', ' ', '#', ' ', '#', ' ', '#'],
        ['#', ' ', '#', ' ', ' ', ' ', '#', ' ', ' ', ' ', '#', ' ', ' ', ' ',
         '#', ' ', ' ', ' ', '#', ' ', '#', ' ', ' ', ' ', ' ', ' ', '#', ' ',
         ' ', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', '#', ' ',
         ' ', ' ', '#', ' ', '#', ' ', ' ', ' ', '#'],
        ['#', ' ', '#', '#', '#', ' ', '#', '#', '#', ' ', '#', '#', '#', '#',
         '#', '#', '#', ' ', '#', '#', '#', '#', '#', ' ', '#', ' ', '#', '#',
         '#', '#', '#', ' ', '#', ' ', '#', '#', '#', '#', '#', ' ', '#', ' ',
         '#', '#', '#', ' ', '#', '#', '#', '#', '#'],
        ['#', ' ', '#', ' ', ' ', ' ', '#', ' ', ' ', ' ', '#', ' ', ' ', ' ',
         '#', ' ', '#', ' ', ' ', ' ', ' ', ' ', '#', ' ', '#', ' ', ' ', ' ',
         '#', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', '#', ' ', '#', ' ',
         ' ', ' ', '#', ' ', '#', ' ', ' ', ' ', '#'],
        ['#', ' ', '#', ' ', '#', '#', '#', ' ', '#', '#', '#', ' ', '#', ' ',
         '#', ' ', '#', '#', '#', '#', '#', ' ', '#', '#', '#', '#', '#', ' ',
         '#', ' ', '#', '#', '#', '#', '#', '#', '#', ' ', '#', ' ', '#', '#',
         '#', ' ', '#', ' ', '#', ' ', '#', '#', '#'],
        ['#', ' ', '#', ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', ' ',
         '#', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ',
         '#', ' ', '#', ' ', ' ', ' ', '#', ' ', ' ', ' ', '#', ' ', '#', ' ',
         '#', ' ', '#', ' ', '#', ' ', ' ', ' ', '#'],
        ['#', ' ', '#', ' ', '#', ' ', '#', '#', '#', '#', '#', '#', '#', ' ',
         '#', '#', '#', '#', '#', ' ', '#', '#', '#', '#', '#', '#', '#', '#',
         '#', ' ', '#', ' ', '#', ' ', '#', ' ', '#', '#', '#', ' ', '#', ' ',
         '#', ' ', '#', ' ', '#', '#', '#', ' ', '#'],
        ['#', ' ', '#', ' ', '#', ' ', '#', ' ', ' ', ' ', '#', ' ', '#', ' ',
         '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ',
         ' ', ' ', '#', ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', ' ',
         ' ', ' ', '#', ' ', ' ', ' ', '#', ' ', '#'],
        ['#', ' ', '#', ' ', '#', ' ', '#', ' ', '#', ' ', '#', ' ', '#', ' ',
         '#', ' ', '#', ' ', '#', '#', '#', '#', '#', '#', '#', '#', '#', ' ',
         '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#',
         '#', '#', '#', '#', '#', ' ', '#', ' ', '#'],
        ['#', ' ', '#', ' ', '#', ' ', '#', ' ', '#', ' ', '#', ' ', ' ', ' ',
         ' ', ' ', '#', ' ', '#', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ',
         '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ',
         ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', '#'],
        ['#', ' ', '#', ' ', '#', '#', '#', ' ', '#', ' ', '#', '#', '#', '#',
         '#', '#', '#', ' ', '#', ' ', '#', '#', '#', ' ', '#', '#', '#', '#',
         '#', ' ', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#',
         '#', '#', '#', ' ', '#', '#', '#', ' ', '#'],
        ['#', ' ', '#', ' ', ' ', ' ', ' ', ' ', '#', ' ', '#', ' ', ' ', ' ',
         '#', ' ', ' ', ' ', '#', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ',
         '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ',
         '#', ' ', ' ', ' ', '#', ' ', ' ', ' ', '#'],
        ['#', ' ', '#', '#', '#', '#', '#', '#', '#', ' ', '#', ' ', '#', ' ',
         '#', '#', '#', ' ', '#', '#', '#', ' ', '#', '#', '#', '#', '#', ' ',
         '#', '#', '#', '#', '#', '#', '#', ' ', '#', ' ', '#', '#', '#', '#',
         '#', ' ', '#', '#', '#', ' ', '#', '#', '#'],
        ['#', ' ', '#', ' ', ' ', ' ', '#', ' ', ' ', ' ', '#', ' ', '#', ' ',
         ' ', ' ', '#', ' ', '#', ' ', ' ', ' ', '#', ' ', ' ', ' ', '#', ' ',
         ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ',
         '#', ' ', ' ', ' ', '#', ' ', '#', ' ', '#'],
        ['#', ' ', '#', ' ', '#', ' ', '#', ' ', '#', '#', '#', ' ', '#', '#',
         '#', ' ', '#', ' ', '#', ' ', '#', '#', '#', ' ', '#', ' ', '#', '#',
         '#', '#', '#', '#', '#', '#', '#', '#', '#', ' ', '#', '#', '#', ' ',
         '#', '#', '#', ' ', '#', ' ', '#', ' ', '#'],
        ['#', ' ', '#', ' ', '#', ' ', '#', ' ', '#', ' ', ' ', ' ', '#', ' ',
         '#', ' ', '#', ' ', '#', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ',
         ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', ' ', '#', ' ', ' ', ' ',
         '#', ' ', ' ', ' ', '#', ' ', '#', ' ', '#'],
        ['#', ' ', '#', ' ', '#', ' ', '#', ' ', '#', ' ', '#', '#', '#', ' ',
         '#', ' ', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#',
         '#', '#', '#', '#', '#', '#', '#', ' ', '#', '#', '#', ' ', '#', ' ',
         '#', ' ', '#', '#', '#', ' ', '#', ' ', '#'],
        ['#', ' ', ' ', ' ', '#', ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ',
         '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ',
         ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', ' ',
         '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#'],
        ['#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#',
         '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#',
         '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#',
         '#', '#', '#', '#', '#', '#', '#', 'X', '#'],
        ]

visited = [[False for _ in range(len(maze[0]))] for _ in range(len(maze))]

images = []

SCALE_MAZE = 30
ROWS_NUM = len(maze[0])
COLS_NUM = len(maze)
START_X = maze[0].index('0')
START_Y = 0
END_X = maze[COLS_NUM - 1].index('X')
END_Y = COLS_NUM - 1

WALLS_COLOR = (34, 14, 36)
PATH_COLOR = (99, 156, 217)
START_COLOR = (52, 32, 86)
END_COLOR = (84, 84, 197)
ELLIPSE_COLOR = (255, 255, 255)


# defining the queue and adding starting point
q = queue.Queue()
q.put((START_Y, START_X))

solver_step = 1


def print_maze(m):
    for row in m:
        for cell in row:
            cell = cell.ljust(5)
            print(cell, end='')
        print('')


def traverse(y, x):
    if y > 0:
        if maze[y - 1][x] != '#' and not visited[y - 1][x]:
            maze[y - 1][x] = str(solver_step)
            q.put((y - 1, x))
    if y < COLS_NUM - 1:
        if maze[y + 1][x] != '#' and not visited[y + 1][x]:
            maze[y + 1][x] = str(solver_step)
            q.put((y + 1, x))
    if x > 0:
        if maze[y][x - 1] != '#' and not visited[y][x - 1]:
            maze[y][x - 1] = str(solver_step)
            q.put((y, x - 1))
    if x < ROWS_NUM - 1:
        if maze[y][x + 1] != '#' and not visited[y][x + 1]:
            maze[y][x + 1] = str(solver_step)
            q.put((y, x + 1))


def draw_board(m, v):
    img = Image.new('RGB', (len(m[0] * SCALE_MAZE), len(m) * SCALE_MAZE),
                    PATH_COLOR)
    draw = ImageDraw.Draw(img)

    for idx, x in enumerate(m):
        for idy, y in enumerate(m[idx]):
            color = PATH_COLOR
            if y == '#':
                color = WALLS_COLOR
            if idx == END_Y and idy == END_X:
                color = END_COLOR
            if y == '0':
                color = START_COLOR
            draw.rectangle((idy * SCALE_MAZE,
                            idx * SCALE_MAZE,
                           idy * SCALE_MAZE + SCALE_MAZE - 1,
                           idx * SCALE_MAZE + SCALE_MAZE - 1),
                           fill=color)
            reduct_coef = 8
            if v[idx][idy]:
                draw.ellipse((idy * SCALE_MAZE + reduct_coef,
                              idx * SCALE_MAZE + reduct_coef,
                             idy * SCALE_MAZE + SCALE_MAZE - reduct_coef - 1,
                             idx * SCALE_MAZE + SCALE_MAZE - reduct_coef - 1),
                             fill=ELLIPSE_COLOR)
    images.append(img)


while maze[END_Y][END_X] == 'X':
    curr_y, curr_x = q.get()
    solver_step = int(maze[curr_y][curr_x]) + 1
    visited[curr_y][curr_x] = True
    traverse(curr_y, curr_x)
    draw_board(maze, visited)

# Celebrating the completion of the maze by blinking of the end point
for j in range(4):
    for i in range(80):
        if i < 40:
            visited[END_Y][END_X] = True
        elif j == 3:
            break
        else:
            visited[END_Y][END_X] = False
        draw_board(maze, visited)

# Linking all the images together and saving them as .gif file
images[0].save('maze_solver.gif', save_all=True, append_images=images[1:],
               optimize=False, duration=10, loop=0)
